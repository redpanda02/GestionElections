/auth/register:
  post:
    tags:
      - Authentification
    summary: Inscription d'un nouvel utilisateur
    description: Permet de créer un nouveau compte utilisateur
    security: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - motDePasse
              - nom
              - prenom
              - role
            properties:
              email:
                type: string
                format: email
                example: user@example.com
              motDePasse:
                type: string
                format: password
                minLength: 8
                example: Password123!
              nom:
                type: string
                example: Doe
              prenom:
                type: string
                example: John
              role:
                type: string
                enum: [ADMIN, CANDIDAT, ELECTEUR]
                example: ELECTEUR
    responses:
      201:
        description: Utilisateur créé avec succès
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: success
                token:
                  type: string
                data:
                  type: object
                  properties:
                    id:
                      type: integer
                    email:
                      type: string
                    nom:
                      type: string
                    prenom:
                      type: string
                    role:
                      type: string
      400:
        description: Données invalides
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'

paths:
  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: Connexion utilisateur
      description: Authentifie un utilisateur et retourne un token JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        200:
          description: Connexion réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        401:
          description: Identifiants invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 